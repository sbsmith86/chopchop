import { useState } from 'react';
import { useAppContext } from '../context/AppContext';
import { CreatedIssue } from '../types';
import { GitHubClient } from '../utils/github';

/**
 * Summary and approval panel for final issue creation
 */
export default function SummaryApprovalPanel() {
  const { state, setError, setLoading } = useAppContext();
  const [createdIssues, setCreatedIssues] = useState<CreatedIssue[]>([]);
  const [isCreating, setIsCreating] = useState(false);

  /**
   * Create GitHub issues from subtasks
   */
  const handleCreateIssues = async () => {
    if (!state.config || !state.subtasks.length) {
      setError('Configuration and subtasks are required');
      return;
    }

    const repoMatch = state.config.githubRepo.match(/^([^/]+)\/(.+)$/);
    if (!repoMatch) {
      setError('Invalid repository format. Expected: owner/repository');
      return;
    }

    const [, owner, repo] = repoMatch;

    setIsCreating(true);
    setLoading(true);
    setError(null);

    try {
      const githubClient = new GitHubClient(state.config.githubPat);
      
      const parentTitle = state.issue?.title || 'Decomposed Issue';
      const parentUrl = state.issue?.url;
      
      const created = await githubClient.createSubtaskIssues(
        owner,
        repo,
        state.subtasks,
        parentTitle,
        parentUrl
      );
      
      setCreatedIssues(created);
      setError(null);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to create GitHub issues');
    } finally {
      setIsCreating(false);
      setLoading(false);
    }
  };

  /**
   * Export subtasks as markdown
   */
  const exportAsMarkdown = () => {
    const markdown = `# ${state.issue?.title || 'Issue Decomposition'}

## Original Issue
${state.issue?.body || 'No description'}

## Execution Plan
${state.executionPlan?.content || 'No plan generated'}

## Subtasks

${state.subtasks.map((task, index) => `
### ${index + 1}. ${task.title}

${task.description}

**Acceptance Criteria:**
${task.acceptanceCriteria.map(criteria => `- [ ] ${criteria}`).join('\n')}

**Guardrails:**
${task.guardrails.map(guardrail => `- ⚠️ ${guardrail}`).join('\n')}

${task.isTooBig ? '⚠️ **Warning:** This task may be too large and should be split.\n' : ''}
---
`).join('\n')}

*Generated by ChopChop Issue Decomposer*
`;

    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = 'issue-decomposition.md';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    URL.revokeObjectURL(url);
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
        <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-medium text-gray-900 dark:text-white flex items-center">
            ✅ Approval & Creation
          </h2>
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
            Review the final subtasks and create GitHub issues.
          </p>
        </div>

        <div className="px-6 py-4">
          {/* Summary */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-md">
              <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                {state.subtasks.length}
              </div>
              <div className="text-sm text-blue-800 dark:text-blue-300">
                Total Subtasks
              </div>
            </div>
            
            <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-md">
              <div className="text-2xl font-bold text-green-600 dark:text-green-400">
                {state.subtasks.filter(task => !task.isTooBig).length}
              </div>
              <div className="text-sm text-green-800 dark:text-green-300">
                Atomic Tasks
              </div>
            </div>
            
            <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-md">
              <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400">
                {state.subtasks.filter(task => task.isTooBig).length}
              </div>
              <div className="text-sm text-yellow-800 dark:text-yellow-300">
                May Need Splitting
              </div>
            </div>
          </div>

          {/* Issue Details */}
          {state.issue && (
            <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-750 rounded-md">
              <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-2">
                Original Issue:
              </h3>
              <p className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                {state.issue.title}
              </p>
              {state.issue.url && (
                <a
                  href={state.issue.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-sm text-blue-600 dark:text-blue-400 hover:underline"
                >
                  View on GitHub →
                </a>
              )}
            </div>
          )}

          {/* Configuration Summary */}
          {state.config && (
            <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-750 rounded-md">
              <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-2">
                Target Repository:
              </h3>
              <p className="text-sm text-gray-700 dark:text-gray-300">
                {state.config.githubRepo}
              </p>
            </div>
          )}

          {/* Subtasks Preview */}
          {state.subtasks.length > 0 && (
            <div className="mb-6">
              <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-3">
                Subtasks to Create:
              </h3>
              <div className="space-y-2 max-h-64 overflow-y-auto">
                {state.subtasks.map((task, index) => (
                  <div
                    key={task.id}
                    className={`p-3 border border-gray-200 dark:border-gray-600 rounded-md text-sm ${
                      task.isTooBig ? 'border-l-4 border-l-yellow-500' : ''
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <span className="font-medium text-gray-900 dark:text-white">
                        {index + 1}. {task.title}
                      </span>
                      {task.isTooBig && (
                        <span className="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full">
                          Too Big
                        </span>
                      )}
                    </div>
                    <p className="text-gray-600 dark:text-gray-400 mt-1">
                      {task.description.substring(0, 100)}...
                    </p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Created Issues */}
          {createdIssues.length > 0 && (
            <div className="mb-6 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md">
              <h3 className="text-sm font-medium text-green-800 dark:text-green-200 mb-3">
                ✅ Successfully Created Issues:
              </h3>
              <div className="space-y-2">
                {createdIssues.map((issue) => (
                  <div key={issue.number} className="flex items-center justify-between">
                    <span className="text-sm text-green-700 dark:text-green-300">
                      #{issue.number}: {issue.title}
                    </span>
                    <a
                      href={issue.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-sm text-green-600 dark:text-green-400 hover:underline"
                    >
                      View →
                    </a>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Warnings */}
          {state.subtasks.some(task => task.isTooBig) && createdIssues.length === 0 && (
            <div className="mb-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md">
              <div className="flex">
                <div className="flex-shrink-0">
                  <span className="text-yellow-400">⚠️</span>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                    Warning
                  </h3>
                  <div className="mt-2 text-sm text-yellow-700 dark:text-yellow-300">
                    <p>
                      {state.subtasks.filter(task => task.isTooBig).length} subtasks are marked as potentially too large.
                      Consider going back to the Subtasks step to split them into smaller tasks.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="flex items-center justify-between">
            <button
              onClick={exportAsMarkdown}
              className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-600 border border-gray-300 dark:border-gray-500 rounded-md hover:bg-gray-50 dark:hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Export as Markdown
            </button>
            
            {createdIssues.length === 0 ? (
              <button
                onClick={handleCreateIssues}
                disabled={
                  !state.config || 
                  !state.subtasks.length || 
                  isCreating
                }
                className="px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isCreating ? 'Creating Issues...' : `Create ${state.subtasks.length} GitHub Issues`}
              </button>
            ) : (
              <div className="text-sm text-green-600 dark:text-green-400 font-medium">
                ✅ All issues created successfully!
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}