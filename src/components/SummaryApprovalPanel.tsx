import React from 'react';
import { useAppContext } from '../context/AppContext';
import { CreatedIssue, IssueCreationProgress } from '../types';
import { GitHubClient } from '../utils/github';
import { IssueCreationProgressComponent } from './IssueCreationProgressComponent';
import { CompletionScreen } from './CompletionScreen';
import { 
  ClipboardListIcon, 
  ExclamationTriangleIcon, 
  DocumentIcon, 
  ExternalLinkIcon, 
  RocketLaunchIcon,
  DocumentArrowDownIcon,
  HomeIcon
} from './ui/Icons';

/**
 * Summary and approval panel component
 * Final review before creating GitHub issues with progress tracking
 */
export const SummaryApprovalPanel: React.FC = () => {
  const { state, setError, resetState, dispatch } = useAppContext();

  /**
   * Handle progress updates during issue creation
   */
  const handleProgress = (progressUpdate: IssueCreationProgress) => {
    dispatch({ type: 'SET_CREATION_PROGRESS', payload: progressUpdate });

    if (progressUpdate.status === 'completed' && progressUpdate.createdIssue) {
      dispatch({
        type: 'SET_CREATED_ISSUES',
        payload: [...(state.createdIssues || []), progressUpdate.createdIssue]
      });
    }
  };

  /**
   * Create GitHub issues from subtasks with progress tracking
   */
  const handleCreateIssues = async () => {
    dispatch({ type: 'SET_IS_CREATING', payload: true });
    setError(null);
    dispatch({ type: 'SET_CREATED_ISSUES', payload: [] });
    dispatch({ type: 'SET_SHOW_COMPLETION', payload: false });

    // Set initial progress
    dispatch({
      type: 'SET_CREATION_PROGRESS',
      payload: {
        currentIssue: 0,
        totalIssues: state.subtasks.length,
        currentTask: 'Initializing GitHub issue creation...',
        status: 'creating'
      }
    });

    try {
      const githubClient = new GitHubClient(state.config.githubPat);
      const parentTitle = state.issue?.title || 'Decomposed Issue';
      const parentUrl = state.issue?.url;

      // Parse owner and repo from githubRepo (format: "owner/repo")
      let owner = '';
      let repo = '';
      if (state.config.githubRepo) {
        [owner, repo] = state.config.githubRepo.split('/');
      }

      const created = await githubClient.createSubtaskIssues(
        owner,
        repo,
        state.subtasks,
        parentTitle,
        parentUrl,
        state.executionPlan?.instructions, // Pass instructions from execution plan
        handleProgress
      );

      dispatch({ type: 'SET_CREATED_ISSUES', payload: created });
      dispatch({ type: 'SET_SHOW_COMPLETION', payload: true });
      setError(null);
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Failed to create GitHub issues');
    } finally {
      dispatch({ type: 'SET_IS_CREATING', payload: false });
      dispatch({ type: 'SET_CREATION_PROGRESS', payload: null });
    }
  };

  /**
   * Export subtasks as markdown
   */
  const exportAsMarkdown = () => {
    const markdown = `# ${state.issue?.title || 'Issue Decomposition'}

## Original Issue
${state.issue?.body || 'No description'}

## Execution Plan
${state.executionPlan?.content || 'No plan generated'}

## Subtasks

${state.subtasks.map((task, index) => `
### ${index + 1}. ${task.title}

${task.description}

**Acceptance Criteria:**
${task.acceptanceCriteria.map(criteria => `- [ ] ${criteria}`).join('\n')}

**Guardrails:**
${task.guardrails.map(guardrail => `- ⚠️ ${guardrail}`).join('\n')}

${task.isTooBig ? '⚠️ **Warning:** This task may be too large and should be split.\n' : ''}
---
`).join('\n')}

*Generated by ChopChop Issue Decomposer*
`;

    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = 'issue-decomposition.md';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    URL.revokeObjectURL(url);
  };

  /**
   * Start a new decomposition process
   */
  const handleStartNew = () => {
    dispatch({ type: 'SET_SHOW_COMPLETION', payload: false });
    dispatch({ type: 'SET_CREATED_ISSUES', payload: [] });
    dispatch({ type: 'SET_CREATION_PROGRESS', payload: null });
    resetState();
  };

  // Show completion screen if issues were created successfully
  if (state.showCompletion && state.createdIssues && state.createdIssues.length > 0) {
    return (
      <CompletionScreen
        createdIssues={state.createdIssues}
        subtasks={state.subtasks}
        repositoryUrl={state.config?.githubRepo || ''}
        onStartNew={handleStartNew}
        onExportSummary={exportAsMarkdown}
      />
    );
  }

  // Show progress if currently creating issues
  if (state.isCreating) {
    return (
      <div className="p-8">
        <div className="max-w-2xl mx-auto">
          <IssueCreationProgressComponent
            progress={state.creationProgress || {
              currentIssue: 0,
              totalIssues: state.subtasks.length,
              currentTask: 'Initializing GitHub issue creation...',
              status: 'creating'
            }}
            createdIssues={state.createdIssues || []}
          />
        </div>
      </div>
    );
  }

  // Show main summary and approval interface
  return (
    <div className="p-8">
      <div className="max-w-3xl mx-auto">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">Summary & Approval</h2>
        <p className="text-gray-600 mb-8">
          Review your decomposed subtasks and create GitHub issues automatically with one click.
        </p>

        {/* Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div className="bg-gradient-to-br from-blue-50 to-indigo-100 p-6 rounded-xl border border-blue-200 shadow-sm">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <ClipboardListIcon className="w-6 h-6 text-blue-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-blue-600">
                  {state.subtasks.length}
                </div>
                <div className="text-sm font-medium text-blue-800">
                  Tasks Created
                </div>
              </div>
            </div>
          </div>

          {state.subtasks.filter(task => task.isTooBig).length > 0 && (
            <div className="bg-gradient-to-br from-orange-50 to-yellow-100 p-6 rounded-xl border border-orange-200 shadow-sm">
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                  <ExclamationTriangleIcon className="w-6 h-6 text-orange-600" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-orange-600">
                    {state.subtasks.filter(task => task.isTooBig).length}
                  </div>
                  <div className="text-sm font-medium text-orange-800">
                    Need Review
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Issue Details */}
        {state.issue && (
          <div className="mb-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-100">
            <div className="flex items-start space-x-3">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                <DocumentIcon className="w-5 h-5 text-blue-600" />
              </div>
              <div className="flex-1">
                <h3 className="text-sm font-semibold text-gray-900 mb-3">
                  Original Issue
                </h3>
                <p className="text-base font-medium text-gray-700 mb-2">
                  {state.issue.title}
                </p>
                {state.issue.url && (
                  <a
                    href={state.issue.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center px-3 py-1 text-sm font-medium text-blue-700 bg-blue-100 rounded-lg hover:bg-blue-200 transition-colors"
                  >
                    <ExternalLinkIcon className="w-4 h-4 mr-1" />
                    View on GitHub →
                  </a>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Configuration Summary */}
        {state.config && (
          <div className="mb-8 p-6 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100">
            <div className="flex items-start space-x-3">
              <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0">
                <HomeIcon className="w-5 h-5 text-green-600" />
              </div>
              <div className="flex-1">
                <h3 className="text-sm font-semibold text-green-900 mb-2">
                  Target Repository
                </h3>
                <p className="text-base font-medium text-green-800">
                  github.com/{state.config.githubRepo}
                </p>
                <p className="text-sm text-green-700 mt-1">
                  {state.subtasks.length} issues will be created in this repository
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Instructions Context */}
        {state.executionPlan?.instructions && (
          <div className="mb-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-100">
            <div className="flex items-start space-x-3">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                <span className="text-blue-600">📋</span>
              </div>
              <div className="flex-1">
                <h3 className="text-sm font-semibold text-blue-900 mb-2">
                  Instructions & Context Included
                </h3>
                <p className="text-sm text-blue-700 leading-relaxed">
                  Each GitHub issue will include the original instructions and context from the plan to ensure developers have all necessary information.
                </p>
                <div className="mt-3 p-3 bg-blue-100 rounded-lg max-h-24 overflow-y-auto">
                  <p className="text-xs text-blue-800 font-mono">
                    {state.executionPlan.instructions.length > 200 
                      ? `${state.executionPlan.instructions.substring(0, 200)}...` 
                      : state.executionPlan.instructions}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Subtasks Preview */}
        {state.subtasks.length > 0 && (
          <div className="mb-8">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Subtasks to Create
            </h3>
            <div className="space-y-3 max-h-96 overflow-y-auto bg-gray-50 rounded-xl p-4 border border-gray-200">
              {state.subtasks.map((task, index) => (
                <div
                  key={task.id}
                  className={`p-4 bg-white border rounded-xl shadow-sm ${
                    task.isTooBig
                      ? 'border-l-4 border-l-orange-400 bg-gradient-to-r from-orange-50 to-yellow-50 border-orange-200'
                      : 'border-gray-200'
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <span className="inline-flex items-center justify-center w-6 h-6 bg-blue-100 text-blue-600 rounded-full text-xs font-bold">
                          {index + 1}
                        </span>
                        <span className="font-medium text-gray-900">
                          {task.title}
                        </span>
                        {task.isTooBig && (
                          <span className="inline-flex items-center px-2 py-1 text-xs font-medium bg-orange-100 text-orange-800 rounded-full">
                            <ExclamationTriangleIcon className="w-3 h-3 mr-1" />
                            Too Big
                          </span>
                        )}
                      </div>
                      <p className="text-sm text-gray-600 leading-relaxed">
                        {task.description.length > 150
                          ? `${task.description.substring(0, 150)}...`
                          : task.description}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Warnings */}
        {state.subtasks.some(task => task.isTooBig) && (
          <div className="mb-8 p-6 bg-gradient-to-r from-orange-50 to-yellow-50 border-l-4 border-orange-400 rounded-xl">
            <div className="flex items-start space-x-3">
              <div className="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center flex-shrink-0">
                <ExclamationTriangleIcon className="w-5 h-5 text-orange-600" />
              </div>
              <div className="flex-1">
                <h3 className="text-base font-semibold text-orange-800 mb-2">
                  Review Recommended
                </h3>
                <p className="text-sm text-orange-700 leading-relaxed">
                  {state.subtasks.filter(task => task.isTooBig).length} subtasks are marked as potentially too large.
                  Consider going back to the Subtasks step to split them into smaller, more manageable tasks before creating issues.
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={exportAsMarkdown}
            className="inline-flex items-center px-6 py-3 text-base font-medium text-gray-700 bg-white border border-gray-300 rounded-xl hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all shadow-sm"
          >
            <DocumentArrowDownIcon className="w-5 h-5 mr-2" />
            Export as Markdown
          </button>


          <button
            onClick={handleCreateIssues}
            disabled={state.isCreating || !state.config?.githubPat || !state.config?.githubRepo || state.subtasks.length === 0}
            className={`inline-flex items-center px-6 py-3 text-base font-semibold text-white bg-gradient-to-r from-emerald-500 to-green-600 border border-transparent rounded-xl hover:from-emerald-600 hover:to-green-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 shadow-lg transition-all
    ${state.isCreating || !state.config?.githubPat || !state.config?.githubRepo || state.subtasks.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
          >
            {state.isCreating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-solid border-white border-t-transparent mr-2"></div>
                Creating Issues...
              </>
            ) : (
              <>
                <RocketLaunchIcon className="w-5 h-5 mr-2" />
                Create {state.subtasks.length} GitHub Issues
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};